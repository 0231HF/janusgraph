[[elasticsearch]]
Elasticsearch
-------------

//[.tss-center.tss-width-250]
//image:titan-elasticsearch.png[]

[quote,'http://elasticsearch.org/[Elasticsearch Homepage]']
Elasticsearch is a flexible and powerful open source, distributed real-time search and analytics engine for the cloud. Elasticsearch allows you to start small, but will grow with your business. It is built to scale horizontally out of the box. As you need more capacity, just add more nodes, and let the cluster reorganize itself to take advantage of the extra hardware. Elasticsearch clusters are resilient â€“ they will detect and remove failed nodes, and reorganize themselves to ensure that your data is safe and accessible.

Titan supports http://elasticsearch.org[Elasticsearch] as an index backend.  Here are some of the Elasticsearch features supported by Titan:

* *Full-Text*: Supports all `Text` predicates to search for text properties that matches a given word, prefix or regular expression.
* *Geo*: Supports the `Geo.WITHIN` condition to search for points that fall within a given circle. Only supports points for indexing and circles for querying.
* *Numeric Range*: Supports all numeric comparisons in `Compare`.
* *Flexible Configuration*: Supports embedded or remote operation, custom transport and discovery, and open-ended ES settings customization. 

Please see <<version-compat>> for details on what versions of ES will work with Titan.

[IMPORTANT]
Titan currently requires that http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html#_enabling_dynamic_scripting[Elasticsearch's dynamic scripting] be enabled for at least the Groovy lang module.  This `script.disable_dynamic` setting must be `false` or `sandbox` on the Elasticsearch cluster.  This configuration requirement may be removed in future Titan versions.

Elasticsearch Configuration Overview
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Titan supports two distinct configuration tracks for Elasticsearch.  "Track" in this chapter means a set of configuration options.

. The new `interface` track
. The legacy track

These tracks are mutually exclusive; a configuration uses only one or the other and not both simultaneously.  The `interface` track is recommended over the legacy track.  The `interface` track, introduced in 0.5.1, offers a superset of the legacy track's functionality.  The legacy track will be maintained through at least the end of the 0.5.x patch series.

[NOTE]
Elasticsearch options start with the string "`index.[X].`" where "`[X]`" is a user-defined name for the backend.  This name is passed to Titan's ManagementSystem interface when building a mixed index, as described in <<index-mixed>>.  The name tells Titan which backend to use, since there may be more than one.  Configuration snippets in this chapter use `search`, whereas prose discussion of options typically uses `[X]`.  The exact index name is not significant as long as it is used consistently in Titan's configuration and when administering indices.

[TIP]
It's recommended that index names contain only alphanumeric lowercase characters and hyphens, and that they start with a lowercase letter.

[[es-cfg-interface-track]]
The `interface` Configuration Track
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The `interface` track is activated by setting either one of the following:

[source,properties]
----
# Activate the interface track with ES's Node client
index.search.elasticsearch.interface=NODE
index.search.backend=elasticsearch
----

[source,properties]
----
# Or activate the interface with ES's TransportClient
index.search.elasticsearch.interface=TRANSPORT_CLIENT
index.search.backend=elasticsearch
----

The `NODE` and `TRANSPORT_CLIENT` values tell Titan to use either the Node or Transport client.  One or the other must be specified to use this track.  Do not specify both in the same configuration.


[TIP]
This chapter assumes some familiarity with the difference between Elasticsearch's "Node client" and "Transport client".  For background on these two Elasticsearch clients and their comparative tradeoffs, see these links to the external Elasticsearch documentation:
+
* http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_talking_to_elasticsearch.html[Elasticsearch Docs: Talking to Elasticsearch]
* http://www.elasticsearch.org/guide/en/elasticsearch/client/java-api/current/client.html[Elasticsearch Docs: Java Clients]


Configuration on the `interface` track proceeds through roughly the following steps:

. If the Titan config option `index.[X].conf-file` is set, it's interpreted as the name of an Elasticsearch config file and its contents are copied into the ES transport or node configuration
. Any Titan config options starting with `index.[X].elasticsearch.ext.` are copied verbatim to the ES transport or node configuration
. Any other ES-related Titan config options listed in Titan's config file are copied into their respective ES transport or node configuration settings (<<titan-config-ref>> lists these options)
. `script.disable_dynamic` is set to false

After these steps, the Transport client will consult Titan's `index.[X].hostname` setting for a list of ES nodes to use as request endpoints.  This setting does not apply for the Node client.

[[es-cfg-common-opts]]
Common Options
^^^^^^^^^^^^^^

Arbitrary Elasticsearch settings can be specified through one or both of the following mechanisms:

* The `index.[X].conf-file` option, which is interpreted as a path to an Elasticsearch YAML/JSON/properties file
+
The value must be a path to a file.  If the path is relative, and the path appears in a Titan properties file on disk, then the path will be interpreted relative to the directory containing the Titan properties file in which it appears.  The file will be opened and loaded using Elasticsearch's `ImmutableSettings.Builder.loadFromStream` method.  This method will attempt to guess the file content's syntax by the filename extension; for this reason, it's recommended that the filename end in either ".json", ".yml", ".yaml", or ".properties", as appropriate, so that ES uses the correct parser.  Here's an example configuration fragment:
+
[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE # or TRANSPORT_CLIENT
index.search.conf-file=/home/titan/elasticsearch_client.yaml
----
+
[source,yaml]
----
# /home/titan/elasticsearch_client.yaml
node.name=alice
----

* Options with the the `index.[X].elasticsearch.ext.` prefix in Titan's properties
+
Titan's iterates over all properties starting with `index.[X].elasticsearch.ext.`, where `[X]` is an index name such as `search`.  It strips the prefix from each property key.  The remainder of the stripped key will be interpreted as an Elasticsearch configuration key.  The string value is passed into the Elasticsearch configuration unchanged.  Here's an example configuration fragment showing how to specify the Elasticsearch `node.name` setting using the `ext` config mechanism:
+
[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE # or TRANSPORT_CLIENT
index.search.elasticsearch.ext.node.name=bob
----

The `conf-file` and `ext` mechanisms can be used together.  The `conf-file`, when present, is loaded first.  Any settings under `ext` are then applied.  Hence, if a key exists in both `ext` and `conf-file`, the value from `ext` will take precedence.

Setting Elasticsearch configuration options through either a `conf-file` or `ext` is recommended.

[[es-cfg-transport-opts]]
Transport Client Options
^^^^^^^^^^^^^^^^^^^^^^^^

In addition to common options described in <<es-cfg-common-opts>>, the Transport client accepts a comma-separated list of hosts via Titan's `index.[X].hostname` key.  Each host or host:port pair specified here will be added to the Transport client's round-robin list of request targets.  This setting has no analog in an Elasticsearch configuration file and must be set through Titan's `index.[X].hostname` option.  Here's a minimal Transport client configuration that will round-robin over 10.0.0.10 on the default Elasticsearch native protocol port (9300) and 10.0.0.20 on port 7777:

[source,properties]
index.search.backend=elasticsearch
index.search.elasticsearch.interface=TRANSPORT_CLIENT # or NODE
index.search.hostname=10.0.0.10,10.0.0.20:7777

[[es-cfg-node-opts]]
Node Client Options
^^^^^^^^^^^^^^^^^^^

It's possible to configure the Node client using a configuration file or `ext` config keys as described in <<es-cfg-common-opts>>.  This is the recommended approach.

Besides `conf-file` and `ext`, Titan also processes the following options when setting up a Node client:

`index.[X].elasticsearch.client-only`:: When set, call `NodeBuilder.data(!value).client(value)`.  This has the same effect as setting "node.data: !value" and "node.client: value" in the ES configuration (where "value" is true or false and !value is the negation).
`index.[X].elasticsearch.local-mode`:: When set, call `NodeBuilder.local(value)`.  This has the same effect as setting "node.local: value" in the ES configuration (where "value" is true or false).
`index.[X].elasticsearch.load-default-node-settings`:: This controls whether Elasticsearch will attempt to load configurations from ES's system properties or default file locations before applying any other configuration.  This is true by default in both Titan and in Elasticsearch.  Editing this setting is not normally required.

[[es-cfg-jvmlocal-iface]]
Node Example: JVM-local Discovery
+++++++++++++++++++++++++++++++++

The following Titan configuration and accompanying Elasticsearch config file create a Node which uses ES's "JVM local" discovery.  This means that the Node can only see other Nodes within the JVM.  The Node does not listen for connections on network sockets or attempt to discover a cluster over the network.  This is convenient when testing Titan in a single-machine setup.

[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE
index.search.conf-file=es_jvmlocal.yml
----

[source,yaml]
----
# es_jvmlocal.yml
node.data: true
node.client: false
node.local: true
# These paths are interpreted relative to the JVM's current working directory
path.data: es/data
path.work: es/work
path.logs: es/logs
----

The following configuration is similar to the one above, except it uses `ext` and the `index.[X].directory` Titan setting to locate the ES work, data, and log paths.  When the `index.[X].directory` appears in a Titan properties file and is set to a relative path, that path is interpreted relative to the directory containing the Titan properties file.  Compare this to setting `path.data`, `path.work`, and `path.logs` directly, which will be interpreted relative to the current working directory of the Java VM.

[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE
# data, work, and logs subdirectories for ES will be created in
# <directory containing this properties file>/../db/es
index.search.directory=../db/es
index.search.elasticsearch.ext.node.data=true
index.search.elasticsearch.ext.node.client=false
index.search.elasticsearch.ext.node.local=true
----

Node Example: Connecting to a Remote Cluster
++++++++++++++++++++++++++++++++++++++++++++

The following Titan configuration and accompanying Elasticsearch config file create a Node which discovers its cluster by sending unicast packets to `host1` on the default port and `host2` on `customport`.  The Node client will attempt to learn all members of the cluster using `unicast.hosts` as the initial points of contact.  The Node started by Titan will not accept any data.  It discovers the cluster and routes requests using that information, but it doesn't hold any state and can be lost without affecting Elasticsearch's availability or durability.

[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE
index.search.conf-file=es_netclient.yml
----

[source,yaml]
----
# es_netclient.yml
node.data: false
node.client: true
discovery.zen.ping.multicast.enabled: false
discovery.zen.ping.unicast.hosts: [ "host1", "host2:customport" ]
----

This configuration has the same effect as the one listed above, except using `ext` instead of `conf-file`.

[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE
index.search.elasticsearch.ext.node.data=false
index.search.elasticsearch.ext.node.client=true
index.search.elasticsearch.ext.discovery.zen.ping.multicast.enabled=false
index.search.elasticsearch.ext.discovery.zen.ping.unicast.hosts=host1,host2:customport
----

Node Example: Joining an ES Cluster as a Data Node
++++++++++++++++++++++++++++++++++++++++++++++++++

This is similar to the example in the previous section, except the Node holds Elasticsearch data.  This means Titan's Elasticsearch instance will be a full-fledged member of the Elasticsearch cluster, and if the process containing Titan and the ES Node dies, it could affect Elasticsearch's availability or durability.  This is an uncommon configuration.

[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE
index.search.conf-file=es_clustermember.yml
----

[source,yaml]
----
# es_clustermember.yml
node.data: true
node.client: false
node.local: false
path.data: es/data
path.work: es/work
path.logs: es/logs
discovery.zen.ping.multicast.enabled: false
discovery.zen.ping.unicast.hosts: [ "host1", "host2:customport" ]
----

This configuration has the same effect as the one listed above, except using `ext` instead of `conf-file`.

[source,properties]
----
index.search.backend=elasticsearch
index.search.elasticsearch.interface=NODE
index.search.elasticsearch.ext.node.data=true
index.search.elasticsearch.ext.node.client=false
index.search.elasticsearch.ext.node.local=false
# The next three paths are interpreted relative to the JVM working directory
index.search.elasticsearch.ext.path.data=es/data
index.search.elasticsearch.ext.path.work=es/work
index.search.elasticsearch.ext.path.logs=es/logs
index.search.elasticsearch.ext.discovery.zen.ping.multicast.enabled=false
index.search.elasticsearch.ext.discovery.zen.ping.unicast.hosts=host1,host2:customport
----

[[es-cfg-legacy-track]]
The Legacy Configuration track
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The legacy configuration track allows running either a Transport client or a Node in JVM-local discovery mode.  Running a Node that discovers the cluster over network sockets is not supported.

This track is activated by omitting the `index.[X].elasticsearch.interface` option from Titan's configuration file.

[NOTE]
The legacy track is not recommended for new installations.  Consider using the newer <<es-cfg-interface-track,the `interface` track>> instead.

[[es-cfg-jvmlocal-legacy]]
Embedded JVM-local Node Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For single machine deployments, Elasticsearch can run embedded with Titan.  In other words, Titan will start Elasticsearch internally and connect to it within the JVM.  This is similar to setting `node.local` 

To run Elasticsearch embedded, add the following configuration options to the graph configuration file where `/tmp/searchindex/` specifies the directory where Elasticsearch should store the index data:

[source,properties]
----
index.search.backend=elasticsearch
index.search.directory=/tmp/searchindex
index.search.elasticsearch.client-only=false
index.search.elasticsearch.local-mode=true
----

Note, that Elasticsearch will not be accessible from outside of this particular Titan instance, i.e., remote connections will not be possible. Also, it might be advisable to run Elasticsearch in a separate jvm even for single machine deployments to achieve more predictable GC behavior.

In the above configuration, the index backend is named `search`. Replace `search` by a different name to change the name of the index.

[[es-cfg-transportclient-legacy]]
Transport Client Configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Titan can connect to an external Elasticsearch cluster running remote on a separate cluster of machines or locally on the same machine.  In either case it will use TCP sockets as opposed to JVM-local transport discovery.

To connect Titan to an external Elasticsearch cluster, add the following configuration options to the graph configuration file where `hostname` lists the IP addresses of the instances in the Elasticsearch cluster:

[source,properties]
----
index.search.backend=elasticsearch
index.search.hostname=100.100.101.1,100.100.101.2
index.search.elasticsearch.client-only=true
----

Make sure that the Elasticsearch cluster is running prior to starting a Titan instance attempting to connect to it. Also ensure that the machine running Titan can connect to the Elasticsearch instances over the network if the machines are physically separated. This might require setting additional configuration options which are summarized below.

In the above configuration, the index backend is named `search`. Replace `search` by a different name to change the name of the index.

Legacy Configuration Options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Refer to <<titan-config-ref>> for a complete listing of all options.  This section contains the subset of ES options that are effective on the legacy configuration track.  All options listed below must start with a `index.[X].` prefix as described at the start of this chapter, but the prefix is omitted below for brevity.

* *elasticsearch.index-name*: Name of the index
* *elasticsearch.cluster-name*: Name of the Elasticsearch cluster. If none is defined, the name will be ignored.
* *elasticsearch.local-mode*: Whether Titan should run Elasticsearch embedded
* *elasticsearch.client-only*: Whether this node is a client node with no data
* *config-file*: Filename of the Elasticsearch yaml file used to configure this instance. _Only applicable when local-mode is true_
* *directory*: Base directory which will contain the ES work, data, and logs subdirectories.  _Only applicable when local-mode is true_

Troubleshooting
~~~~~~~~~~~~~~~

Connection Issues to remote Elasticsearch cluster
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

First, make sure that you have Elasticsearch configured for remote usage: Set `client-only` to true and `local-mode` to false. Second, try if you can connect to Elasticsearch through the http interface from the given machine. Thirdly, try disabling `sniff`.

Classpath or Field errors
^^^^^^^^^^^^^^^^^^^^^^^^^

When you see exception referring to lucene implementation details, make sure you don't have a conflicting version of Lucene on the classpath. Exception may look like this:

[source,text]
java.lang.NoSuchFieldError: LUCENE_41

Optimizing Elasticsearch
~~~~~~~~~~~~~~~~~~~~~~~~

Write Optimization
^^^^^^^^^^^^^^^^^^

For <<bulk-loading,bulk loading>> or other write-intense applications, consider increasing Elasticsearch's refresh interval. Refer to https://groups.google.com/d/topic/elasticsearch/yp6bTiP2JYE/discussion[this discussion] on how to increase the refresh interval and its impact on write performance. Note, that a higher refresh interval means that it takes a longer time for graph mutations to be available in the index.

For additional suggestions on how to increase write performance in Elasticsearch with detailed instructions, please read http://blog.bugsense.com/post/35580279634/indexing-bigdata-with-elasticsearch[this blog post].

Further Reading
^^^^^^^^^^^^^^^

* Please refer to the http://elasticsearch.org[Elasticsearch homepage] and available documentation for more information on Elasticsearch and how to setup an Elasticsearch cluster.

