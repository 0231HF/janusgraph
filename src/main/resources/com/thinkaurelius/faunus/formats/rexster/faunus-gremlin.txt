import org.codehaus.jettison.json.JSONObject
import org.codehaus.jettison.json.JSONArray

rangeOfVertices = g.V[start..<end].toList()
rangeOfVertices = rangeOfVertices.collect{
    // 2.2.0 way
    // def vJson = com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement((Element) it, null, GraphSONMode.COMPACT)
    def vJson = com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement((Element) it)

    def outEdges = it.outE.toList().collect{ edge ->
        // 2.2.0 way
        // com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement((Element) edge, null, GraphSONMode.COMPACT)

        com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement((Element) edge)
    }

    def outEdgesArray = new JSONArray()
    outEdges.each { edge-> outEdgesArray.put(edge) }
    vJson.put("_outE", outEdgesArray)

    def inEdges = it.inE.toList().collect{ edge ->
        // 2.2.0 way
        // com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement((Element) edge, null, GraphSONMode.COMPACT)
        com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement((Element) edge)
    }

    def inEdgesArray = new JSONArray()
    inEdges.each { edge -> inEdgesArray.put(edge) }
    vJson.put("_inE", inEdgesArray)

    return vJson
}