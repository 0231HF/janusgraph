!https://github.com/thinkaurelius/faunus/raw/master/doc/images/faunus-head.png! !https://github.com/thinkaurelius/faunus/raw/master/doc/images/hadoop-elephant.png!

Faunus is a "Hadoop":http://hadoop.apache.org/ centric "graph":http://en.wikipedia.org/wiki/Graph_(mathematics) analytics engine. It is used to compute "graph derivations":http://en.wikipedia.org/wiki/Graph_rewriting, "graph statistics":http://en.wikipedia.org/wiki/Network_theory, and graph data mappings (input/output mappings) on massive-scale graphs represented across a multi-machine cluster. Beyond this foundation, other benefits are itemized below.

  * Process "infinite sized" graphs using the functional, parallel "MapReduce":http://hadoop.apache.org/docs/stable/mapred_tutorial.html computing model.
  * Express complex global graph traversals or graph statistics as simple "Gremlin queries":http://gremlin.tinkerpop.com (via "REPL":http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop or "CLI":http://en.wikipedia.org/wiki/Command-line_interface). No knowledge of MapReduce or Java code required as Gremlin expressions are automatically compiled to MapReduce steps.
  * Easily create an arbitrarily large Hadoop cluster via the provided "Whirr recipe":https://github.com/thinkaurelius/faunus/wiki/Running-Faunus-on-Amazon-EC2.
  * Numerous input/output formats supported which enables Faunus to be used as a graph data mapping tool.
  * Process graphs in the distributed graph database "Titan":http://thinkaurelius.github.com/titan/. Take advantage of "Cassandra's":http://cassandra.apache.org/ and "HBase's":http://hbase.apache.org/ native Hadoop connectivity.
  * Process graphs exposed by TinkerPop's "Rexster":http://rexster.tinkerpop.com graph server. Simply pull graph data out of any "Blueprints":http://blueprints.tinkerpop.com enabled "graph database":http://en.wikipedia.org/wiki/Graph_database.
  * Process graphs represented in "GraphSON":https://github.com/tinkerpop/blueprints/wiki/GraphSON-Reader-and-Writer-Library. Simply store the text-representation in "HDFS":http://hadoop.apache.org/hdfs/.
  * Process graphs represented in various "RDF":http://www.w3.org/RDF/ formats. Simply store the text-representation in HDFS.
  * Output graphs as an edge list to easily interoperate with other graph analysis packages (e.g. "R":http://www.r-project.org/ "iGRaph":http://igraph.sourceforge.net/).